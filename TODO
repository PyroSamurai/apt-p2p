Some last few things to do before release.

- Handle/investigate the HTTP client pipeline errors
- DB should not always restat files (especially for expired hashes)
- remove missing files at startup (in DB's removeUntracked)
- when files modtime but not size changes, rehash them to be sure
- remove files from the peer's download cache
- update the modtime of files downloaded from peers
  - also set the Last-Modified header for the return to Apt
- refresh expired DHT hashes concurrently instead of sequentially

Consider what happens when multiple requests for a file are received.

When another request comes in for a file already being downloaded,
the new request should wait for the old one to finish. This should
also be done for multiple requests for peer downloads of files with
the same hash.


Packages.diff files need to be considered.

The Packages.diff/Index files contain hashes of Packages.diff/rred.gz 
files, which themselves contain diffs to the Packages files previously 
downloaded. Apt will request these files for the testing/unstable 
distributions. They need to be dealt with properly by 
adding them to the tracking done by the AptPackages module.


Improve the downloaded and uploaded data measurements.

There are 2 places that this data is measured: for statistics, and for
limiting the upload bandwidth. They both have deficiencies as they
sometimes miss the headers or the requests sent out. The upload
bandwidth calculation only considers the stream in the upload and not
the headers sent, and it also doesn't consider the upload bandwidth
from requesting downloads from peers (though that may be a good thing).
The statistics calculations for downloads include the headers of
downloaded files, but not the requests received from peers for upload
files. The statistics for uploaded data only includes the files sent
and not the headers, and also misses the requests for downloads sent to
other peers.


Consider storing deltas of packages.

Instead of downloading full package files when a previous version of
the same package is available, peers could request a delta of the
package to the previous version. This would only be done if the delta
is significantly (>50%) smaller than the full package, and is not too
large (absolutely). A peer that has a new package and an old one would
add a list of deltas for the package to the value stored in the DHT.
The delta information would specify the old version (by hash), the
size of the delta, and the hash of the delta. A peer that has the same
old package could then download the delta from the peer by requesting
the hash of the delta. Alternatively, very small deltas could be
stored directly in the DHT.


Consider tracking security issues with packages.

Since sharing information with others about what packages you have
downloaded (and probably installed) is a possible security
vulnerability, it would be advantageous to not share that information
for packages that have known security vulnerabilities. This would
require some way of obtaining a list of which packages (and versions)
are vulnerable, which is not currently available.


Consider adding peer characteristics to the DHT.

Bad peers could be indicated in the DHT by adding a new value that is
the NOT of their ID (so they are guaranteed not to store it) indicating
information about the peer. This could be bad votes on the peer, as
otherwise a peer could add good info about itself.


Consider adding pieces to the DHT instead of files.

Instead of adding file hashes to the DHT, only piece hashes could be
added. This would allow a peer to upload to other peers while it is
still downloading the rest of the file. It is not clear that this is
needed, since peer's will not be uploading and downloading ery much of
the time.
